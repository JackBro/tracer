/* TEST CODE w/o pipes */

main_1(N) :-
      zmem_usage,
      set_counter(term_size,0),
      test_answer(N),
      cmem_usage(MemUsage),
      print_message("MASTER MEMORY USAGE: \n",[]),
      report_mem_usage(MemUsage),
      counter_value(term_size,TermSizes),
      print_message("MASTER estimate size of asserted terms: %Mb\n",
		    [TermSizes/1048576]).

:- dynamic(slicing_answer,8).
test_answer(N):-
	ML = f(0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0),
	Reps = [rep(2 ,f(0),f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		       f ,f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
		rep(10,f(0),f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		       f ,f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
		rep(15,f(0),f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		       f ,f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
		rep(31,f(0),f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		       f, f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
		rep(33,f(0),f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		       f ,f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))],
        GlobalArrMark=f(0),
	GlobalVarMark=f(1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0),
	LocalArrMark =f,
	LocalVarMark =f(0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0),
	p(N,func_main,0,ML,Reps,GlobalArrMark,GlobalVarMark,LocalArrMark,LocalVarMark).


p(0,_,_,_,_,_,_,_,_):-!.
p(N,FName,Depth,ML,     
  Reps,GlobalArrMark,GlobalVarMark,LocalArrMark,LocalVarMark):-
	N > 0,!,
	Term = slicing_answer(FName,Depth,ML,Reps,			      			      
			      GlobalArrMark,GlobalVarMark,
			      LocalArrMark,LocalVarMark),
	size_term(Term,0,SizeTerm),
	add_counter(term_size,SizeTerm),
	/* fassert/1 allocates memory for pterms */		
	/* fassert(Term),*/
	/* table/1 avoids allocating memory for pterms */	
	table(Term),
	p(N-1,FName,Depth+1, 	  
	  ML,Reps,GlobalArrMark,GlobalVarMark,LocalArrMark,LocalVarMark).

/* TEST CODE w/ pipes */
main_2(N) :-
      pipe_init,
      zmem_usage,	
      pipe_test_answer(N),
      cmem_usage(MemUsage),      
      pipe_master_cmem_usage(SlaveMemUsage),
      pipe_master_size_term(TermSize),
      pipe_terminate,
      print_message("MASTER MEMORY USAGE: \n",[]),
      report_mem_usage(MemUsage),
      print_message("SLAVE MEMORY USAGE: \n",[]),
      report_mem_usage(SlaveMemUsage),
      print_message("SLAVE estimate size of asserted terms: %Mb\n",
		    [TermSize/1048576]),
      !.
      
main_2(_) :-
      zmem_usage,
      set_counter(term_size,0),      
      pipe_slave_loop.
		 
pipe_test_answer(N):-
	ML = f(0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0),
	Reps = [rep(2 ,f(0),f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		       f ,f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
		rep(10,f(0),f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		       f ,f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
		rep(15,f(0),f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		       f ,f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
		rep(31,f(0),f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		       f, f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)),
		rep(33,f(0),f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		       f ,f(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))],
        GlobalArrMark=f(0),
	GlobalVarMark=f(1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0),
	LocalArrMark =f,
	LocalVarMark =f(0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0),
	pipe_p(N,func_main,0,
		      ML,Reps,GlobalArrMark,GlobalVarMark,LocalArrMark,LocalVarMark).

pipe_p(0,_,_,_,_,_,_,_,_):-!.
pipe_p(N,FName,Depth,ML, Reps,
       GlobalArrMark,GlobalVarMark,
       LocalArrMark,LocalVarMark):-
	N > 0,!,
	
	pipe_master_assert(FName,Depth,ML,Reps,
			   GlobalArrMark,GlobalVarMark,
			   LocalArrMark,LocalVarMark),
	
	pipe_p(N-1,FName,Depth+1, 	  
	       ML,Reps,
	       GlobalArrMark,GlobalVarMark,
	       LocalArrMark,LocalVarMark).


/* PIPE OPERATIONS*/
	
pipe_init :-
	pipe(pipe_master_slave),
	pipe(pipe_slave_master),
	fork,
	%print_message("*** MASTER: STARTED\n", []), 
	tell(pipe_master_slave),
	see(pipe_slave_master),
	!.
pipe_init :-
	see(pipe_master_slave),
	tell(pipe_slave_master),
	%print_message("*** SLAVE: STARTED\n", []),
	!,
	fail.

pipe_terminate :-
	%print_message("*** MASTER: sent HALT to slave.\n", []),	
	print_file("halt .\n", []),
	flush,
	seen,
	told.


/* Here slave loop to receive indefinitely requests */
pipe_slave_loop :-
	pipe_slave_perform_action,
	pipe_slave_loop.

pipe_slave_perform_action :-
        % We use "not not" technique to clear up the context
	pipe_slave_perform_action_aux, !, fail.
pipe_slave_perform_action.

pipe_slave_perform_action_aux :-	
	% Read slave from the master	
	read(X),

	% Process master request
        process_master_input(X,
			     RequestArgs,
			     Action
			    ),
	
        % Perform action for master and reply
        slave_perform_action_and_reply(Action,
				       RequestArgs
				      ),
	!,
	fail.
pipe_slave_perform_action_aux.

/* Here slave replies requests */
process_master_input(assert(A,B,C,D,E,F,G,H),
		     request_args(A,B,C,D,E,F,G,H),
		     assert):- !.
process_master_input(cmem_usage,_,cmem_usage):-	!.
process_master_input(size_term,_,size_term):-	!.
process_master_input(halt,_,_):-
	%print_message("SLAVE: closing ... \n",[]),
	told,
	seen,
	halt.
process_master_input(Msg,_,_):-
	%print_message("SLAVE: unrecognized message: % \n",[Msg]),
	!,
	fail.
	
/* Here slave replies */
slave_perform_action_and_reply(assert,
			       request_args(A,B,C,D,E,F,G,H)
			      ):-
	size_term(slicing_answer(A,B,C,D,E,F,G,H),0,NN),
	add_counter(term_size,NN),
	/* fassert/1 allocates memory for pterms */	
	% fassert(slicing_answer(A,B,C,D,E,F,G,H)), 
	/* table/1 avoids allocating memory for pterms */
	table(slicing_answer(A,B,C,D,E,F,G,H)),
	print_file("ok. \n",[]),
	%print_message("SLAVE: served asserted answer. \n",[]),
	flush.
slave_perform_action_and_reply(cmem_usage,_Request):-
	cmem_usage(SlaveMemUsage),
	print_file(" cmem_usage(%) .\n",[SlaveMemUsage]),	
	%print_message("SLAVE: served cmem_usage. \n",[]),
	flush.
slave_perform_action_and_reply(size_term,_Request):-
	counter_value(term_size,TermSize),
	print_file(" size_term(%) .\n",[TermSize]),	
	%print_message("SLAVE: served size_term. \n",[]),
	flush.

/* Here master requests */
pipe_master_assert(A,B,C,D,E,F,G,H):-
	% Do request 
	print_file("assert(%,%,%,%,%,%,%,%)  . \n",
		   [A,B,C,D,E,F,G,H]),
	% Get ACK
	read(_),!.
pipe_master_cmem_usage(MemUsage):-
	% Do request 
	print_file("cmem_usage  . \n",[]),
	% Get ACK
	read(X),
	X = cmem_usage(MemUsage),
	!.
pipe_master_size_term(TermSize):-
	% Do request 
	print_file("size_term  . \n",[]),
	% Get ACK
	read(X),
	X = size_term(TermSize),
	!.
	
/* Write operations */
print_message(Msg,Args)  :- stdout_printf(Msg,Args).
print_file(Msg,Args)     :- printf(Msg,Args).


/* For profiling memory usage */
report_mem_usage(memory(_Total,Code,Stack,Heap,Trail,Solver,PTerms)):-	
 	return_zero_if_negative(Stack,Stack0),
 	return_zero_if_negative(Heap,Heap0),
 	return_zero_if_negative(Trail,Trail0),
 	return_zero_if_negative(Solver,Solver0),
	Unit = 1048576,  % Mb
	Base = 1, % diagnostic returns already memory usage in bytes	
	% print_message("\t Memory usage stats: \n",[]),
	print_message("\t\tTotal memory %Mb \n",
	       [(Code+Stack0+Heap0+Trail0+Solver0+PTerms)*Base/Unit]),
	print_message("\t\tProgram memory %Mb \n",[(Code*Base)/Unit]),
	print_message("\t\tStack %Mb \n",[(Stack0*Base)/Unit]),
	print_message("\t\tHeap %Mb \n",[(Heap0*Base)/Unit]),
	print_message("\t\tTrail %Mb \n",[(Trail0*Base)/Unit]),
	print_message("\t\tSolver %Mb \n",[(Solver0*Base)/Unit]),
	print_message("\t\tPTerms %Mb \n",[(PTerms*Base)/Unit]).
return_zero_if_negative(X,0):- X < 0,!.
return_zero_if_negative(X,X):- !.

/* To estimate term sizes */
size_term(X,N,1+N):- var(X),!.
size_term(X,N,1+N):- atomic(X),!.
size_term(F,N0,N1):-
	functor(F,_,_),
	F =.. [_|Args],
	size_functor(Args,1+N0,N1).

size_functor([],N,N).
size_functor([X|Xs],N0,N2):-
	size_term(X,N0,N1),
	size_functor(Xs,N1,N2).

	
	