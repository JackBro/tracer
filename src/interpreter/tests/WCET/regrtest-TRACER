#!/bin/bash

source ./regrtest-expected-results

#######################################################################
# Optional to be  configured 
#######################################################################
stat=RESULTS__$(date +%Y-%h-%d__%H-%M).stat
log=log.txt

TRACER_CMMD=tracer 

# is $1 installed?
_have() { which "$1" &>/dev/null; }


if ! _have $TRACER_CMMD;  
then
    echo "TRACER: command \"$1\" is not found."
    echo "TRACER: add the directory where \"$1\" is located to \$PATH."
    exit 0
fi

#######################################################################
# Should not change below onwards
#######################################################################
abspath=$(cd ${0%/*} && echo $PWD/${0##*/})
TESTS_HOME=`dirname "$abspath"`

currtest=""
block="" 

# counters
counter=0
dies=0

usage() {
cat <<EOF
usage: $0 [options]
  -help         print this message
  -Wt <options> pass string options to TRACER
  -block s      run the tests in block s (default "all")
  -all          run all the tests
EOF
}

#------------------------------------------------------------------#
# By default we use alias, array solver, and witnesses.
#------------------------------------------------------------------#
options="-alias y -mccarthy y" 

# process args
while [ "$1" != "" ]; do
    case "$1" in
	-help)
	    usage
	    exit 1
	    ;;	
	-block)
	    shift
	    block="$block$1"
	    ;;	
	-all)
	    shift 
	    block="ALL"
	    ;;	 
	-Wt)
	    shift 
	    options="$1 $options"
	    ;;	 
	*)
	    echo "unknown arg: $1"
	    usage
	    exit 0
	    ;;
    esac
    shift
done


# just does a bunch of greps on the *.out file
function getstats {
    echo $1 >> $stat
    if grep "Analysis time" test_${currtest}_${counter}.out; then	
        # Here we print to file the bunch of greps
	echo `grep -ie "Total WCET"  test_${currtest}_${counter}.out` >> $stat
	echo `grep -ie "States visited" test_${currtest}_${counter}.out` >> $stat
	echo `grep -ie "Analysis time"  test_${currtest}_${counter}.out` >> $stat
	echo `grep -ie "# subsumed nodes"  test_${currtest}_${counter}.out` >> $stat
	echo `grep -ie "# witnesses failed"  test_${currtest}_${counter}.out` >> $stat
        # Here we store in variables the results of greps	
	wcet=`grep -ie "total wcet"  test_${currtest}_${counter}.out | sed 's@\(.*\):\(.*\)@\2@g' `  
	states=`grep -ie "states visited" test_${currtest}_${counter}.out | sed 's@\(.*\):\(.*\)@\2@g'` 
	time=`grep -ie "analysis time"  test_${currtest}_${counter}.out | sed 's@\(.*\):\(.*\) sec@\2@g'` 
	subsumed=`grep -ie "# subsumed nodes" test_${currtest}_${counter}.out | sed 's@\(.*\):\(.*\)@\2@g'`  
	unsat=`grep -ie "# witnesses failed"  test_${currtest}_${counter}.out | sed 's@\(.*\):\(.*\)@\2@g'` 
    else	
	dies=$[ $dies + 1]	
    fi	
}

function cleanDirectory {
    cd $1
    rm -f *.clp
    rm -f *.dot
    rm -f *.TRACES
    rm -f *.out
    cd ${TESTS_HOME}    
    rm -f *_CIL.c
}


# short_name full_name options
function run {
    currtest=$1
    echo "[${counter}] ${currtest}.c" >> $log
    echo "------------ [$currtest] $* ------------"
    ${TRACER_CMMD} wcet $2.c $3 > test_${currtest}_${counter}.out
    getstats $1
    checkstats $1
    counter=$[ ${counter} + 1]
}

function run_try_until_success {
    currtest=$1
    echo "[${counter}] ${currtest}.c" >> $log
    echo "------------ [$currtest] $* ------------"
    has_success=0
    while [ $has_success -eq 0 ]; do
	${TRACER_CMMD} wcet $2.c $3 &> test_${currtest}_${counter}.out
	if grep "Segmentation fault"  test_${currtest}_${counter}.out; then	
	    has_success=0
        else
	    has_success=1
	fi
    done
    getstats $1
    checkstats $1
    counter=$[ ${counter} + 1]
}

blockSIMPLE(){
    run foo foo "$options"
    run foo1 foo1 "$options"
    run foo2 foo2 "$options"
    run foo3 foo3 "$options"
    run foo4 foo4 "$options"
    run foo5 foo5 "$options"
    run foo6 foo6 "$options"
    run foo7 foo7 "$options"
    run suhendra suhendra "$options"
    run test-subsumption-1-1 test-subsumption-1 "$options"
    run test-subsumption-1-2 test-subsumption-1 "-intp none $options"
    run test-subsumption-2-1 test-subsumption-2 "$options"
    run test-subsumption-2-2 test-subsumption-2 "-intp ndwp $options"
}

blockFUNCTION(){
    run bar3 bar3 " $options"
    run foo_bar foo_bar " $options"
    run function1 function1 " $options"
    run function2 function2 " $options"
}

# blockARRAYS(){
# }

# blockALIAS(){
# }

blockLOOP(){
    run bubblesort bubblesort "$options"
    run nested_loops nested_loops "$options"
    run test-loop-1 test-loop-1 "$options"
    run test-loop-2 test-loop-2 "$options"
    run test-loop-3 test-loop-3 "$options"
    run test_unstruct_loop test_unstruct_loop "$options"
}


blockWITNESSES(){
    run test_witness-1 test_witness "$options"
    run test_witness-2 test_witness "-witnesses n $options"
    run test_witness_functions-1 test_witness_functions "$options"
    run test_witness_functions-2 test_witness_functions "-witnesses n $options"
    run test_witness_loops-1 test_witness_loops "$options"
    run test_witness_loops-2 test_witness_loops "-witnesses n $options"
}

runAllTests(){
    blockSIMPLE
    blockFUNCTION
    blockLOOP
    blockWITNESSES
}


echo $block
case "$block" in
    
    SIMPLE)
	shift
	blockSIMPLE
	;;    
#     ALIAS)
# 	shift
# 	blockALIAS
# 	;;    
#     ARRAYS)
# 	shift
# 	blockARRAYS
# 	;;    
    FUNCTION)
	shift
	blockFUNCTION
	;;
    LOOP)
	shift
	blockLOOP
	;;    
    WITNESSES)
	shift
	blockWITNESSES
	;;    
    ALL)
	shift 
	runAllTests
	;;    
    *)
	echo "unknown block!: $block"
	usage
	exit 0
	;;
esac  

   
# Clean temporary files
cleanDirectory "."

# Print some stuff
echo "No Answer:             $dies"     >> $log

exit 1
