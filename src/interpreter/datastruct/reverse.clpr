
% alist(H,L,emptymultiset) :- L=0.
% alist(H,L,union([S,multiset([L,L+1])])) :-
%       L>0,
%       disjoint([multiset([L,L+1]),S]),
% 	access(H,L+1,X),
% 	alist(H,X,S).

unfold(alist(H,L,T),
	[
         body([], [multiseteq(T,emptymultiset),eq(L,0)]),
	 body([alist(H,X,S)],
              [multiseteq(T,union([S,multiset([L,plus(L,1)])])),
               gt(L,0),
               access(H,plus(L,1),X)])
        ]).

% reverse(H,I,I,H,0).
% reverse(H,I,E,aupd(H1,E1+1,J),E1) :-
% 	access(H,E1+1,X), X=E,
% 	reverse(H,I,E1,H1,J).

unfold(reverse(H,I,E,H1,E1),
	[
         body([], [eq(I,E),arrayeq(H,H1),eq(E1,0)]),
	 body([reverse(H,I,E1,H1,J)],
	      [arrayeq(H1,aupd(H1,plus(E1,1),J)), access(H,plus(E1,1),E)])
        ]).

% To Prove:
%
%     reverse(H0,I0,I,H,J), alist(H,J,T), alist(H,I,U),
%     disjoint([T,U]), S=union([T,U]), I>0, access(H,I+1,X)
%         |= reverse(H0,I0,X,aupd(H,I+1,J),I),
%            alist(aupd(H,I+1,J),I,?T'),
%            alist(aupd(H,I+1,J),X,?U'),
%            disjoint([?T',?U']), S=union([?T',?U']).


run :-
	set_counter(assertionnumber, 0),
 	addunfoldlevel(0, [reverse(H0,I0,I,H,J),
                            alist(H,J,T),
                            alist(H,I,U)],
 	               UnfoldableGAtoms),
        addunfoldlevel(0, [reverse(H0,I0,X,aupd(H,plus(I,1),J),I),
                           alist(aupd(H,plus(I,1),J),I,T1),
                           alist(aupd(H,plus(I,1),J),X,U1)],
 		       UnfoldableHAtoms),
	lprove(0, 0, [], UnfoldableGAtoms,
                 [disjoint([T,U]), multiseteq(S,union([T,U])), gt(I,0),
                  access(H,plus(I,1),X)],
		 [], UnfoldableHAtoms,
                 [disjoint([T1,U1]), multiseteq(S,union([T1,U1]))], []),
        printf("PROOF FAILED.\n", []).
run :-
	counter_value(assertionnumber, X),
	printf("Proof succeed\n", []),
	printf("Number of assertions: %\n", [X]).


:- consult('recursive.clpr').

