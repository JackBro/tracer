%------------------------------------------------------------------------%
% (c) Florence Benoy, Andy King and Fred Mesnard
%
% See the TPLP paper "Calculating Convex Hulls with
% a Linear Solver" for explanation and discussion
%------------------------------------------------------------------------%
% Adapted by Jorge Navas to CLP(R).
%
% import
% - project_sym_constraints/6 (from tracer_solver.clp.gpp)
% - myvar/1                   (from tracer_utils.clp.gpp)
%------------------------------------------------------------------------%


%------------------------------------------------------------------------%
% project(+Xs,+Cxs,-ProjectCxs)
%------------------------------------------------------------------------%
% Xs is a list of variables, Cxs is a list of contraints, Projectxs is
% the projection of the conjunction of the constraints of Cxs on the
% variables Cs.
%------------------------------------------------------------------------%
polyhedra_project(Xs, Cxs, ProjectCxs):-
	project_sym_constraints([],[],[],Xs,Cxs,ProjectCxs).

%------------------------------------------------------------------------%
% convex_hull(+Xs, +Cxs, +Ys, +Cys, +Zs, +Czs)
%------------------------------------------------------------------------%
% Xs and Ys are list of variables of the same length, Cxs and Cys are
% lists of constraints of the variables of Xs and Ys repressively, Zs
% is a list of new fresh variables of the same length as Xs and Ys,
% and Czs is a list of constrains over Zs which represents the
% convex-hull of Cxs and Cys.
% IMPORTANT: Xs and Ys must be disjoint set of variables!
%------------------------------------------------------------------------%
% Tests:
% convex_hull([X1,Y1],[geq(0,X1),
%                      geq(0,minus(X1)),geq(1,Y1),geq(minus(1),minus(Y1))],
%             [X2,Y2],[geq(0,minus(X2,Y2)),geq(0,plus(minus(X2),Y2)),
%                      geq(0,minus(X2))],[A,B],CH).
% CH = [geq(0, minus(A, B)), geq(0,minus(0,A)), geq(1,plus(minus(0,A),B))]
% convex_hull([X1,Y1],[eq(X1,0),eq(Y1,1)],[X2,Y2],[geq(X2,0),eq(Y2,X2)],
%             [A,B],CH).
% CH = [geq(A,0), geq(minus(A,B),minus(1)),geq(0,minus(A,B))]
%------------------------------------------------------------------------%
convex_hull(Xs, Cxs, Ys, Cys, Zs, Czs) :-
        scale(Cxs, Sig1, [], C1s),  %   A1.y1 =< Sig1.B1
        scale(Cys, Sig2, C1s, C2s), %   A2.y2 =< Sig2.B2
	% zs_i = xs_i + ys_i
        add_vect(Xs, Ys, Zs, C2s, C3s),
	% add constraints Sig1+Sig2 = 1, Sig1>=0, Sig2>=0
        polyhedra_project(Zs,
			  [geq(Sig1,0),
			   geq(Sig2,0),
			   eq(plus(Sig1,Sig2),1)|C3s],Czs).

scale([], _, Cs, Cs).
scale([C1|C1s], Sig, C2s, C3s) :-
        C1 =.. [RelOp, A1, B1],
        C2 =.. [RelOp, A2, B2],
        mul_exp(A1, Sig, A2),
        mul_exp(B1, Sig, B2),
        scale(C1s, Sig, [C2|C2s], C3s).

mul_exp(E1, Sigma, E2)             :- once(mulexp(E1, Sigma, E2)).

mulexp(        X ,  _, X)          :- myvar(X).
mulexp(mult(N,X) ,  _, mult(N,X))  :- ground(N), myvar(X).
mulexp(minus(X)  ,Sig, minus(Y))   :- mulexp(X, Sig, Y).
mulexp(plus(A,B) ,Sig, plus(C,D))  :- mulexp(A, Sig, C), mulexp(B, Sig, D).
mulexp(minus(A,B),Sig, minus(C,D)) :- mulexp(A, Sig, C), mulexp(B, Sig, D).
mulexp(  N       ,Sig, mult(N,Sig)):- ground(N).

add_vect([], [], [], Cs, Cs).
add_vect([U|Us], [V|Vs], [W|Ws], C1s, C2s) :-
       add_vect(Us, Vs, Ws, [eq(W,plus(U,V))|C1s], C2s).


%-------------------------------------------------------------------------%
% polyhedra_widen(+Vars,+Clist1,+Clist2,-WidenVars,-ClistWiden)
%-------------------------------------------------------------------------%
% Clist1, Clist2 are 2 lists of cosntraints on Vars. WidenVars are
% fresh variables and ClistWiden is the result of selecting the
% constraints from Clist1 which are entailed by Clist2.
%-------------------------------------------------------------------------% 
% This predicates was taken from the termination analyser of 
% Cohavit Taboch and Mike Codish
%-------------------------------------------------------------------------%
% polyhedra_widen(_,_,[],_,[]) :- !.
% polyhedra_widen(_,[],_,_,[]) :- !.
% polyhedra_widen(Vars,Cons1,Cons2,WidenVars,ClistWiden) :-
%         copy_term((Vars,Cons1,Cons2),(Vars1,Clist1,Clist2)),
%         copy_term((Vars1,Clist1),(WidenVars,ClistCopy)),
%         clp_meta(Clist2),
%         entailed_constraints(Clist1,ClistCopy,ClistWiden).

% entailed_constraints([],[],[]).
% entailed_constraints([C|Cs],[CC|CCs],[CC|En]) :-
%         clp_entailed([C]),!,
%         entailed_constraints(Cs,CCs,En).
% entailed_constraints([_|Cs],[_|CCs],En) :-
%         entailed_constraints(Cs,CCs,En).

