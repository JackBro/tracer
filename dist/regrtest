#!/bin/bash

stat=RESULTS__$(date +%Y-%h-%d__%H-%M).stat
log=log.txt

TRACER_CMMD=$TRACER_PATH"/tracer"

# is $1 installed?
_have() { which "$1" &>/dev/null; }


if ! _have $TRACER_CMMD;  
then
    echo "TRACER: command \"$1\" is not found."
    echo "TRACER: add the directory where \"$1\" is located to \$PATH."
    exit 0
fi

#######################################################################
# Should not change below onwards
#######################################################################
abspath=$(cd ${0%/*} && echo $PWD/${0##*/})
# to get the path only - not the script name - add
TESTS_HOME=`dirname "$abspath"`

currtest=""
extra_options=" "
block=""

# counters
counter=0
success=0
failure=0
unexSuccess=0
unexFailure=0
dies=0

usage() {
cat <<EOF
usage: $0 [options] 
  -help         print this message
  -block s      run the tests in block s (default "all")
  -Wt <options> pass string options to TRACER
  -all          run all the tests
EOF
}

# process args
while [ "$1" != "" ]; do
  case "$1" in
    -help)
      usage
      exit 0
      ;;
    -block)
      shift
      block="$block$1"
     ;;
    -Wt)
      shift 
      extra_options="$1"
      ;;	       
    -all)
      block="ALL"
     ;;
    *)
      echo "unknown arg: $1"
      usage
      exit 2
      ;;

  esac
  shift
done


#takes  no args -- just does a bunch of greps on the *.out file
function getstatsSAFE() {
if grep "SAFE ;-)" test_${currtest}_${counter}.out; then
    echo "Regression test on ${currtest}_${counter} OK" >> ${log}   
    echo "[${counter}]: ${currtest}" >> $stat
    echo "Program SAFE" >> $stat
    echo `grep "States visited"  test_${currtest}_${counter}.out` >> $stat
    echo `grep "Analysis time"   test_${currtest}_${counter}.out` >> $stat
    echo `grep "MINMAX restarts" test_${currtest}_${counter}.out` >> $stat
    success=$[ $success + 1 ]
else 
    if grep "UNSAFE" test_${currtest}_${counter}.out; then
	echo "Regresion test on ${currtest}_${counter} FAILED" >> ${log}   
        unexFailure=$[ $unexFailure + 1 ]
    else
	echo "Unexpected error ${currtest}" >> ${log}   
	dies=$[ $dies + 1]	
    fi
fi
}

function getstatsUNSAFE() {
if grep "UNSAFE" test_${currtest}_${counter}.out; then
    echo "Regression test on ${currtest}_${counter} OK" >> ${log}      
    echo "[${counter}]: ${currtest}" >> $stat
    echo "Program UNSAFE" >> $stat
    echo `grep "States visited"  test_${currtest}_${counter}.out` >> $stat
    echo `grep "Analysis time"   test_${currtest}_${counter}.out` >> $stat
    echo `grep "MINMAX restarts" test_${currtest}_${counter}.out` >> $stat
    failure=$[ $failure + 1 ]
else 
    if grep "SAFE ;-)" test_${currtest}_${counter}.out; then
	echo "Regresion test on ${currtest}_${counter} FAILED" >> ${log}   
        unexSuccess=$[ $unexSuccess + 1 ]
    else
	echo "Unexpected error ${currtest}" >> ${log}   
	dies=$[ $dies + 1]	
    fi
fi
}

function cleanDirectory {
    rm -f $1/*.clp
    rm -f $1/*.dot
    rm -f $1/*.out
}

function runSAFE {
    currtest=$2
    echo "[${counter}] ${currtest}.c" >> ${log}    
    echo "------------ [$currtest] $* ------------"
    ${TRACER_CMMD} $1.c $3 > test_${currtest}_${counter}.out
    getstatsSAFE
    counter=$[ ${counter} + 1]
}

function runUNSAFE {
    currtest=$2
    echo "[${counter}] ${currtest}.c" >> ${log}   
    echo "------------ [$currtest] $* ------------"
    ${TRACER_CMMD} $1.c $3 > test_${currtest}_${counter}.out
    getstatsUNSAFE
    counter=$[ ${counter} + 1]
}

OPTIONS="-optimized-version n $extra_options"
blockSIMPLE(){
    runSAFE   "test1"        "test1"        "$OPTIONS"
    runUNSAFE "test1-unsafe" "test1-unsafe" "$OPTIONS"
    runSAFE   "test2"        "test2"        "$OPTIONS"
    runUNSAFE "test2-unsafe" "test2-unsafe" "$OPTIONS"
    runSAFE   "test3"        "test3"        "$OPTIONS"
    runUNSAFE "test3-unsafe" "test3-unsafe" "$OPTIONS"
}

blockFUNCTION(){
    runSAFE   "testfunc1"        "testfunc1"        "$OPTIONS"
    runUNSAFE "testfunc1-unsafe" "testfunc1-unsafe" "$OPTIONS"
    runSAFE   "testfunc2"        "testfunc2"        " -mccarthy y $OPTIONS"
    runUNSAFE "testfunc2-unsafe" "testfunc2-unsafe" " -mccarthy y $OPTIONS"
    runSAFE   "testfunc3"        "testfunc3"        "$OPTIONS"
    runSAFE   "testfunc4"        "testfunc4"        " -mccarthy y $OPTIONS"
    runUNSAFE "testfunc4-unsafe" "testfunc4-unsafe" " -mccarthy y $OPTIONS"
    runSAFE   "testfunc5"        "testfunc5"        " -mccarthy y $OPTIONS"
    runSAFE   "testfunc6"        "testfunc6"        " -mccarthy y $OPTIONS"
    runUNSAFE "testfunc6-unsafe" "testfunc6-unsafe" " -mccarthy y $OPTIONS"
    runSAFE   "testfunc7"        "testfunc7"        " -mccarthy y $OPTIONS"
    runSAFE   "testfunc8"        "testfunc8"        " -mccarthy y $OPTIONS"
    runUNSAFE "testfunc9-unsafe" "testfunc9-unsafe" "$OPTIONS"
    runUNSAFE "testfunc10-unsafe" "testfunc10-unsafe" " -mccarthy y $OPTIONS"
    runSAFE   "testfunc11" "testfunc11" "$OPTIONS"
    runUNSAFE "testfunc12-unsafe" "testfunc12-unsafe" "$OPTIONS"
    runUNSAFE "testfunc13-unsafe" "testfunc13-unsafe" "$OPTIONS"
    runSAFE   "testfunc14" "testfunc14" "$OPTIONS"
}

blockLOOP(){

    runSAFE   "testloop1"    "testloop1"  "$OPTIONS"
    runSAFE   "testloop2"    "testloop2"  "$OPTIONS"
    runUNSAFE "testloop3"    "testloop3"  "$OPTIONS"
    runSAFE   "testloop4"    "testloop4"  "$OPTIONS"
    runUNSAFE "testloop5"    "testloop5"  "$OPTIONS"
    runSAFE   "testloop6"    "testloop6"  "$OPTIONS"
    runSAFE   "testloop7"    "testloop7"  "$OPTIONS"
    runUNSAFE "testloop8"    "testloop8"  "$OPTIONS"
    runSAFE   "testloop9"    "testloop9"  "$OPTIONS"
    runSAFE   "testloop10"   "testloop10" "$OPTIONS"
    runSAFE   "testloop11"   "testloop11" "$OPTIONS"
    runSAFE   "testloop12"   "testloop12" "$OPTIONS"
    runSAFE   "testloop13"   "testloop13" "$OPTIONS"
    runSAFE   "testloop14"   "testloop14" "$OPTIONS"
    runSAFE   "testloop15"   "testloop15" "$OPTIONS"
    runSAFE   "testloop16"   "testloop16" "$OPTIONS"
    runSAFE   "testloop17"   "testloop17" "$OPTIONS"
    runSAFE   "testloop18"   "testloop18" " -mccarthy y $OPTIONS"
    runSAFE   "testloop19"   "testloop19" " -mccarthy y $OPTIONS"
    runSAFE   "testloop20"   "testloop20" "$OPTIONS"
    runSAFE   "testloop21"   "testloop21" "$OPTIONS"
    runSAFE   "testloop22"   "testloop22" "$OPTIONS"

    runSAFE   "testloop23"   "testloop23" "-mccarthy y $OPTIONS"
    runSAFE   "testloop24"   "testloop24" "-mccarthy y $OPTIONS"
    runUNSAFE "testloop25"   "testloop25" "-mccarthy y $OPTIONS"
    runUNSAFE "testloop26"   "testloop26" "-mccarthy y $OPTIONS"
    runUNSAFE "testloop27"   "testloop27" "$OPTIONS"
    runUNSAFE "testloop28"   "testloop28" "$OPTIONS"
    runSAFE   "testloop29"   "testloop29" "$OPTIONS"
}

blockUSERABS(){
    runSAFE "testabs1"  "testabs1"   "$OPTIONS"
    runSAFE "testabs2"  "testabs2"   "$OPTIONS"
    runSAFE "testabs3"  "testabs3"   "$OPTIONS"
    runSAFE "testabs4"  "testabs4"   " -mccarthy y $OPTIONS"
    runSAFE "testabs5"  "testabs5"   " -mccarthy y $OPTIONS"
    runSAFE "testabs6"  "testabs6"   "$OPTIONS"
    runSAFE "testabs7"  "testabs7"   " -convert-strict-ineq y $OPTIONS"
    runSAFE "testabs8"  "testabs8"   " -convert-strict-ineq y $OPTIONS"
    runSAFE "testabs9"  "testabs9"   " -mccarthy y $OPTIONS"
    runSAFE "testabs10" "testabs10"  " -mccarthy y $OPTIONS"
    runSAFE "testabs11" "testabs11"  " -mccarthy y $OPTIONS"
    runSAFE "testabs12" "testabs12"  " -mccarthy y -convert-strict-ineq y $OPTIONS"
    runSAFE "testabs13" "testabs13"  " -convert-strict-ineq y -loop-inv octagon $OPTIONS"
    runSAFE "testabs14" "testabs14"  " -convert-strict-ineq y -loop-inv octagon $OPTIONS"
    runSAFE "testabs15" "testabs15"  " -mccarthy y -convert-strict-ineq y -loop-inv invgen -optimist-subs n $OPTIONS"
}
    

blockARRAYS(){
    runSAFE   "testarrays1" "testarrays1" " -mccarthy y $OPTIONS"
    runSAFE   "testarrays2" "testarrays2" " -mccarthy y $OPTIONS"
    runSAFE   "testarrays3" "testarrays3" " -mccarthy y $OPTIONS"
    runUNSAFE "testarrays4" "testarrays4" " -mccarthy y $OPTIONS"
    runUNSAFE "testarrays5" "testarrays5" " -mccarthy y $OPTIONS"
    runUNSAFE "testarrays6" "testarrays6" " -mccarthy y $OPTIONS"
    runSAFE "testarrays7" "testarrays7" " -mccarthy y -h 2 $OPTIONS"
    runSAFE "testarrays8" "testarrays8" " -mccarthy y -h 2 $OPTIONS"
    runSAFE "testarrays9" "testarrays9" " -mccarthy y $OPTIONS"
    runUNSAFE "testarrays10" "testarrays10" " -mccarthy y $OPTIONS"
    runUNSAFE "testarrays11" "testarrays11" " -mccarthy y $OPTIONS"
    runSAFE "testarrays12" "testarrays12" " -mccarthy y $OPTIONS"
    runSAFE "testarrays13" "testarrays13" " -mccarthy y $OPTIONS"
 }

blockALIAS() {
    runUNSAFE   "testalias1"          "testalias1"         " -mccarthy y $OPTIONS"
    runSAFE     "testalias2"          "testalias2"         " -mccarthy y $OPTIONS"
    runSAFE     "testalias3"          "testalias3"         " -mccarthy y $OPTIONS"
    runSAFE     "testalias4"          "testalias4"         " -mccarthy y $OPTIONS"
    runSAFE     "testalias5"          "testalias5"         " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias6"          "testalias6"         " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias7"          "testalias7"         " -mccarthy y $OPTIONS"
    runSAFE     "testalias8"          "testalias8"         " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias9"          "testalias9"         " -mccarthy y $OPTIONS"
    runSAFE     "testalias10"         "testalias10"        " -mccarthy y $OPTIONS"
    runSAFE     "testalias11"         "testalias11"        " -mccarthy y $OPTIONS"
    runSAFE     "testalias12"         "testalias12"        " -mccarthy y $OPTIONS"
    runSAFE     "testalias13"         "testalias13"        " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias13-unsafe"  "testalias13-unsafe" " -mccarthy y $OPTIONS"
    runSAFE     "testalias14"         "testalias14"        " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias14-unsafe"  "testalias14-unsafe" " -mccarthy y $OPTIONS"
    runSAFE     "testalias15"         "testalias15"        " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias15-unsafe"  "testalias15-unsafe" " -mccarthy y $OPTIONS"
    runSAFE     "testalias16"         "testalias16"        " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias16-unsafe"  "testalias16-unsafe" " -mccarthy y $OPTIONS"
    runSAFE     "testalias17"         "testalias17"        " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias17-unsafe"  "testalias17-unsafe" " -mccarthy y $OPTIONS"
    runSAFE     "testalias18"         "testalias18"        " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias18-unsafe"  "testalias18-unsafe" " -mccarthy y $OPTIONS"
    runSAFE     "testalias19"         "testalias19"        " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias19-unsafe"  "testalias19-unsafe" " -mccarthy y $OPTIONS"
    runSAFE     "testalias20"         "testalias20"        " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias20-unsafe"  "testalias20-unsafe" " -mccarthy y $OPTIONS"
    runSAFE     "testalias21"         "testalias21"        " -mccarthy y $OPTIONS"
    runSAFE     "testalias22"         "testalias22"        " -mccarthy y $OPTIONS"
    runSAFE     "testalias23"         "testalias23"        " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias24"         "testalias24"        " -mccarthy y $OPTIONS"
    runSAFE     "testalias25"         "testalias25"        " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias25-unsafe"  "testalias25-unsafe" " -mccarthy y $OPTIONS"
    runSAFE     "testalias26"         "testalias26"        " -mccarthy y $OPTIONS"
#   runSAFE     "testalias27"         "testalias27"        " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias28"         "testalias28"        " -mccarthy y $OPTIONS"
    runSAFE     "testalias29"         "testalias29"        " -mccarthy y $OPTIONS"
    runUNSAFE   "testalias29-unsafe"  "testalias29-unsafe" " -mccarthy y $OPTIONS"

}

blockWP(){
    runUNSAFE   "testwp1"  "testwp1" " -intp wp $OPTIONS"
    runSAFE     "testwp2"  "testwp2" " -intp wp $OPTIONS"
    runSAFE     "testwp3"  "testwp3" " -intp wp $OPTIONS"
    runSAFE     "testwp4"  "testwp4" " -intp wp $OPTIONS"
    runSAFE     "testwp5"  "testwp5" " -intp wp $OPTIONS"
    runSAFE     "testwp6"  "testwp6" " -intp wp $OPTIONS"
    runSAFE     "testwp7"  "testwp7" " -intp wp $OPTIONS"
    runSAFE     "testwp8"  "testwp8" " -intp wp $OPTIONS"
    runSAFE     "testwp9"  "testwp9" " -intp wp $OPTIONS"
    runSAFE     "testwp10"  "testwp10" " -intp wp $OPTIONS"
    runSAFE     "testwp11"  "testwp11" " -intp wp $OPTIONS"
    runSAFE     "testwp12"  "testwp12" " -intp wp $OPTIONS"
    runUNSAFE   "testwp13"  "testwp13" " -intp wp $OPTIONS"
    runSAFE     "testwp14"  "testwp14" " -intp wp $OPTIONS"
    runSAFE     "testwp15"  "testwp15" " -intp wp $OPTIONS"
    runSAFE     "testwp16"  "testwp16" " -intp wp $OPTIONS"
    runSAFE     "testwp17"  "testwp17" " -intp wp $OPTIONS"
}

blockCLPPROVER(){
    runUNSAFE   "testwp1"  "testwp1" " -intp clp $OPTIONS"
    runSAFE     "testwp2"  "testwp2" " -intp clp $OPTIONS"
    runSAFE     "testwp3"  "testwp3" " -intp clp $OPTIONS"
    runSAFE     "testwp4"  "testwp4" " -intp clp $OPTIONS"
    runSAFE     "testwp5"  "testwp5" " -intp clp $OPTIONS"
    runSAFE     "testwp6"  "testwp6" " -intp clp $OPTIONS"
    runSAFE     "testwp7"  "testwp7" " -intp clp $OPTIONS"
    runSAFE     "testwp8"  "testwp8" " -intp clp $OPTIONS"
    runSAFE     "testwp9"  "testwp9" " -intp clp $OPTIONS"
    runSAFE     "testwp10"  "testwp10" " -intp clp $OPTIONS"
    runSAFE     "testwp11"  "testwp11" " -intp clp $OPTIONS"
    runSAFE     "testwp12"  "testwp12" " -intp clp $OPTIONS"
    runUNSAFE   "testwp13"  "testwp13" " -intp clp $OPTIONS"
    runSAFE     "testwp14"  "testwp14" " -intp clp $OPTIONS"
    runSAFE     "testwp15"  "testwp15" " -intp clp $OPTIONS"
    runSAFE     "testwp16"  "testwp16" " -intp clp $OPTIONS"
    runSAFE     "testwp17"  "testwp17" " -intp clp $OPTIONS"
}

runAllTests(){
    blockSIMPLE
    blockFUNCTION
    blockLOOP
    blockUSERABS
    blockARRAYS
    blockALIAS
    blockWP
    blockCLPPROVER
}

# process args
echo $block
case "$block" in
    
    SIMPLE)
	shift
	blockSIMPLE
	;;    
    FUNCTION)
	shift
	blockFUNCTION
	;;   
    LOOP)
	shift
	blockLOOP 
	;;   
    ALIAS)
	shift
	blockALIAS
	;;
    USERABS)
	shift
	blockUSERABS    
	;;
    WP)
	shift
	blockWP
	;;
    CLPPROVER)
	shift
	blockCLPPROVER
	;;
    ALL)
	runAllTests
	;;
    *)
	echo "unknown block!: $block"
	usage
	exit 2
	;;
esac  
shift
   
# Clean temporary files
cleanDirectory "."

echo ""                                     >> ${log}   
echo ""                                     
echo "Successful tests:      $success"      >> ${log}   
echo "Successful tests:      $success"     
echo "Failed as expected:    $failure"      >> ${log}      
echo "Failed as expected:    $failure"      
echo "Unexpected success:    $unexSuccess"  >> ${log}   
echo "Unexpected success:    $unexSuccess"  
echo "Unexpected failure:    $unexFailure"  >> ${log}   
echo "Unexpected failure:    $unexFailure"  
echo "No Answer:             $dies"         >> ${log}   
echo "No Answer:             $dies"         



